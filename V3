-- Load Kavo UI Library for GUI
local Kavo = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Kavo:CreateLib("99 Nights in the Forest Script", "SynapseTwo")

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Variables
local CHEST_NAME = "DiamondChest" -- From previous research
local autoFarmWood = false
local autoFarmScrap = false
local autoDiamond = false
local autoRefillCampfire = false
local autoEat = false
local killAura = false
local killAuraRange = 20

-- Tab 1: Auto Farm
local AutoFarmTab = Window:NewTab("Auto Farm")
local AutoFarmSection = AutoFarmTab:NewSection("Auto Collect Resources")

AutoFarmSection:NewToggle("Auto Collect Wood", "Automatically chops and collects wood from trees", function(state)
    autoFarmWood = state
end)

AutoFarmSection:NewToggle("Auto Collect Scrap", "Automatically collects scrap from structures", function(state)
    autoFarmScrap = state
end)

AutoFarmSection:NewToggle("Auto Fish", "Automatically fishes if available", function(state)
    -- Implement auto fish if fishing update is active
    -- For now, placeholder
    if state then
        print("Auto Fish enabled - Placeholder")
    end
end)

-- Tab 2: Auto Diamond
local AutoDiamondTab = Window:NewTab("Auto Diamond")
local AutoDiamondSection = AutoDiamondTab:NewSection("Auto Collect Diamond Chest")

AutoDiamondSection:NewToggle("Auto Find & Collect Diamond Chest", "Finds and collects diamond chest, then server hops", function(state)
    autoDiamond = state
end)

AutoDiamondSection:NewButton("Server Hop", "Manually hop to another server", function()
    serverHop()
end)

-- Function to find nearest chest (from previous code)
function findNearestChest()
    local nearestChest = nil
    local minDistance = math.huge
    for _, v in pairs(Workspace:GetDescendants()) do
        if v.Name == CHEST_NAME and (v:IsA("BasePart") or v:IsA("Model")) then
            local partPosition = v:IsA("Model") and v:GetPrimaryPartCFrame().Position or v.Position
            local distance = (humanoidRootPart.Position - partPosition).Magnitude
            if distance < minDistance then
                minDistance = distance
                nearestChest = v
            end
        end
    end
    return nearestChest
end

-- Collect chest
function collectChest(chest)
    local prompt = chest:FindFirstChildOfClass("ProximityPrompt", true)
    if prompt then
        fireproximityprompt(prompt)
    end
    wait(0.5)
end

-- Server Hop function (improved)
function serverHop()
    local servers = {}
    local cursor = ""
    repeat
        local url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        if cursor then url = url .. "&cursor=" .. cursor end
        local response = HttpService:JSONDecode(game:HttpGet(url))
        for _, server in ipairs(response.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                table.insert(servers, server.id)
            end
        end
        cursor = response.nextPageCursor
    until not cursor
    if #servers > 0 then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
    end
end

-- Tab 3: Auto Refill Campfire
local AutoRefillTab = Window:NewTab("Auto Refill Campfire")
local AutoRefillSection = AutoRefillTab:NewSection("Campfire Management")

AutoRefillSection:NewToggle("Auto Refill Campfire", "Automatically adds wood to campfire when low", function(state)
    autoRefillCampfire = state
end)

AutoRefillSection:NewSlider("Fuel Threshold", "Refill when fuel below this %", 0, 100, function(value)
    -- Placeholder for fuel threshold
end)

-- Tab 4: Auto Eat
local AutoEatTab = Window:NewTab("Auto Eat")
local AutoEatSection = AutoEatTab:NewSection("Auto Eat Food")

AutoEatSection:NewToggle("Auto Eat", "Eats food when hunger is low", function(state)
    autoEat = state
end)

AutoEatSection:NewDropdown("Preferred Food", "Choose food to eat first", {"Apple", "Berry", "Cooked Meat"}, function(selected)
    -- Placeholder for food preference
end)

-- Tab 5: Kill Aura
local KillAuraTab = Window:NewTab("Kill Aura")
local KillAuraSection = KillAuraTab:NewSection("Combat Features")

KillAuraSection:NewToggle("Kill Aura", "Damages nearby enemies automatically", function(state)
    killAura = state
end)

KillAuraSection:NewSlider("Kill Aura Range", "Range of kill aura", 10, 50, function(value)
    killAuraRange = value
end)

KillAuraSection:NewToggle("Auto Kill Cultists", "Prioritize cultists", function(state)
    -- Placeholder
end)

-- Main Loop
spawn(function()
    while wait(0.1) do
        character = player.Character
        humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        humanoid = character and character:FindFirstChild("Humanoid")

        if humanoidRootPart and humanoid then
            -- Auto Farm Wood
            if autoFarmWood then
                for _, tree in pairs(Workspace:GetChildren()) do
                    if tree.Name == "Tree" and tree:IsA("Model") then  -- Assume tree model name
                        local prompt = tree:FindFirstChildOfClass("ProximityPrompt", true)
                        if prompt then
                            humanoidRootPart.CFrame = tree.PrimaryPart.CFrame * CFrame.new(0, 0, -5)
                            fireproximityprompt(prompt)
                        end
                    end
                end
            end

            -- Auto Farm Scrap (similar, find scrap sources)
            if autoFarmScrap then
                -- Implement similar to wood, find scrap objects
                print("Auto Scrap - Placeholder")
            end

            -- Auto Diamond
            if autoDiamond then
                local chest = findNearestChest()
                if chest then
                    humanoidRootPart.CFrame = chest.CFrame * CFrame.new(0, 5, 0)
                    collectChest(chest)
                    serverHop()
                end
            end

            -- Auto Refill Campfire
            if autoRefillCampfire then
                local campfire = Workspace:FindFirstChild("Campfire")  -- Assume name
                if campfire then
                    -- Check fuel, add wood if low
                    -- Need game specific, placeholder
                    local prompt = campfire:FindFirstChildOfClass("ProximityPrompt")
                    if prompt then
                        fireproximityprompt(prompt)  -- Assume adds fuel
                    end
                end
            end

            -- Auto Eat
            if autoEat and humanoid.Health < humanoid.MaxHealth * 0.5 then  -- Assume hunger affects health or find hunger stat
                for _, tool in pairs(player.Backpack:GetChildren()) do
                    if tool.Name:match("Food") then  -- Assume food tools
                        humanoid:EquipTool(tool)
                        tool:Activate()
                        break
                    end
                end
            end

            -- Kill Aura
            if killAura then
                for _, char in pairs(Workspace:GetChildren()) do
                    if char:IsA("Model") and char ~= character and char:FindFirstChild("Humanoid") and (char.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude <= killAuraRange then
                        -- Assume enemies have tag or name like "Cultist"
                        if char.Name == "Cultist" or char:FindFirstChild("EnemyTag") then
                            -- Damage remote or direct
                            char.Humanoid:TakeDamage(100)  -- May not work, use remote if exists
                        end
                    end
                end
            end
        end
    end
end)
